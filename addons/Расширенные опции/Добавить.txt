	class ControllerProductProduct extends Controller {
	private $error = array();

// ДОБАВИТЬ ФУНКЦИЮ



        public function update_prices() {
		        $json = array();
		        
				
				if (isset($this->request->request['product_id']) && isset($this->request->request['quantity'])) {
					$this->load->model('catalog/product');
					
					$json['special'] = 0;
					$json['you_save'] = false;
					
					$option_price = 0;
					$product_id = (int)$this->request->request['product_id'];
					$quantity = (int)$this->request->request['quantity'];
					$product_options = $this->model_catalog_product->getProductOptions($product_id);
					
					$product_info = $this->db->query("SELECT p.price, p.tax_class_id, (SELECT price FROM " . DB_PREFIX . "product_discount pd2 WHERE pd2.product_id = p.product_id AND pd2.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND pd2.quantity <= '" . (int)$quantity . "' AND ((pd2.date_start = '0000-00-00' OR pd2.date_start < NOW()) AND (pd2.date_end = '0000-00-00' OR pd2.date_end > NOW())) ORDER BY pd2.quantity DESC, pd2.priority ASC, pd2.price ASC LIMIT 1) AS discount, (SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE p.product_id = '" . (int)$product_id . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'");
					
					if (!empty($this->request->request['option'])) {
						$option = $this->request->request['option'];
					} else {
						$option = array();
					}
			
			
			
					foreach($product_options as $product_option) {
						if (is_array($product_option['product_option_value'])) {
							foreach($product_option['product_option_value'] as $option_value) {
								if (isset($option[$product_option['product_option_id']])) {
									if (($option[$product_option['product_option_id']] == $option_value['product_option_value_id']) || ((is_array($option[$product_option['product_option_id']])) && (in_array($option_value['product_option_value_id'], $option[$product_option['product_option_id']])))) {
										
										//echo "<pre>";print_r(var_dump($option_value));echo "</pre>";
										
										if ($option_value['price_prefix'] == '+') {
											$option_price+= $option_value['price'];
										} elseif ($option_value['price_prefix'] == '-') {
											$option_price-= $option_value['price'];
										}
									}
								}
							}
						}
					}
				
					$option_group = array();
					$res = $this->db->query("SELECT * FROM " . DB_PREFIX . "relatedoptions_option WHERE	product_id='".$product_id."'");
					if($res->num_rows){
						
						foreach($res->rows as $row){
							$option_group[$row['relatedoptions_id']][$row['option_id']] = $row['option_value_id'];
						}
						
					}
				
					$product_option_group = array();
					foreach($option as $option_id => $option_value_id){
						$res = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_option_value WHERE
													product_id='".$product_id."' AND
													product_option_value_id='".$option_value_id."' AND
														product_option_id='".$option_id."'");
						foreach($res->rows as $row){
								$product_option_group[$row['option_id']]=$row['option_value_id'];
						}
					}
					
					if(count($product_option_group)){
						
						$find_relatedoptions_id = 0;
						
						ksort($product_option_group);
						foreach($option_group as $relatedoptions_id => $optio_rl){
								
							ksort($optio_rl);
							
							foreach($optio_rl as $index => $value){
								
								if(isset($product_option_group[$index]) AND $product_option_group[$index] == $value){
									unset($optio_rl[$index]);
								}
								
							}
							
							if(count($optio_rl) == 0){
							//if(md5(json_encode($optio_rl)) == md5(json_encode($product_option_group))){
								$find_relatedoptions_id = $relatedoptions_id;
								break;
							}
										
						}
						
						if($find_relatedoptions_id > 0){
							$res = $this->db->query("SELECT * FROM " . DB_PREFIX . "relatedoptions WHERE relatedoptions_id='".$find_relatedoptions_id."' LIMIT 1");
							if($res->num_rows){
								$option_price += (float)$res->row['price'];
							}
						}
						
					}
				
					$price = $product_info->row['discount'] ? (float)$product_info->row['discount'] * (int)$quantity + (float)$option_price * (int)$quantity : (float)$product_info->row['price'] * (int)$quantity + (float)$option_price * (int)$quantity;
					
					$special = $product_info->row['special'] ? (float)$product_info->row['special'] * (int)$quantity + (float)$option_price * (int)$quantity : 0;
					
					if ($special) {
						$json['special'] = $this->currency->format($this->tax->calculate($special, $product_info->row['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						$json['you_save'] =  '-' . number_format(((float)$price - (float)$special) / (float)$price * 100, 0) . '%';
					}
					
					$json['price'] = $this->currency->format($this->tax->calculate($price, $product_info->row['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
					
					$json['tax'] = $this->currency->format((float)$special ? $special : $price, $this->session->data['currency']);
				}
			
				$this->response->addHeader('Content-Type: application/json');
				$this->response->setOutput(json_encode($json));
			}
